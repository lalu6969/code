#include <iostream>
#include <string.h>
using namespace std;
class student
{
        int roll_no;
        char name[30];
        float SGPA;
public:
        int size;
        student()
        {
                    size=3;
        }
        void accept( student list[]);
        void display( student list[]);
        void bubble_sort( student list[]);
        void insert_sort( student list[]);
        void quick_sort( student list[],int first,int last);
        void search( student list[]);
        void binary_search(student list[]);
};
// ACCEPT FUNCTION
void student:: accept(student list[])
{
        int i;
        for(i=0; i<size; i++)
                {
                cout<<"\nEnter Roll-Number, Name, SGPA:";
                cin>>list[i].roll_no>>list[i].name>>list[i].SGPA;
                }
        }
// DISPLAY FUNCTION
void student::display( student list[])
{
        int i;
        cout<<"\n Roll-Number \t Name \t SGPA \n";
        for(int i=0; i<size; i++)
                {
                cout<<"\n      "<<list[i].roll_no<<"   \t  "<<list[i].name<<"\t  "<<list[i].SGPA;
                }
        cout<<"\n";
}






// BUBBLE SORT FUNCTION
void student::bubble_sort( student list[])
{
        int i,j,c=0;
        struct student key;
        for(i=0; i<size; i++)
                {
                for(j=0; j<(size-1-i); j++)
                        {
                        if(list[j].roll_no>list[j+1].roll_no)
                                {
                                key=list[j];
                                list[j]=list[j+1];
                                list[j+1]=key;
                                }
                        c++;
                        }
                }
        cout<<"\n";
        cout<<"\nNumber of passes is: "<<c;
}
// INSERTION SORT FUNCTION
void student::insert_sort( student list[])
{
        int k,j,c=0;
        student key;
        for(k=1; k<size; k++)
        {
                key=list[k];
                j=k-1;
                while(strcmp(list[j].name,key.name)>0 && j>=0)
                        {
                                    list[j+1]=list[j];
                                    j--;
                                c++;
                         }
                list[j+1]=key;
        }
        cout<<"\nNumber of passes is: "<<c;
        }
// QUICK SORT FUNCTION
void student::quick_sort( student list[],int first,int last)
        {
        int pivot,i,j;


        if(first < last)
                {
                pivot = first;
                i = first;
                j = last;


                while(i < j)
                        {
                            while(list[i].SGPA >= list[pivot].SGPA && i < last)
                                    {
                                        i++;
                                    }
    
                            while(list[j].SGPA<list[pivot].SGPA)
                                    {
                                        j--;
                                    }
                if(i<j){
                    swap(list[i],list[j]);
                }
                    }


                swap(list[pivot], list[j]);
                quick_sort(list,first,j-1);
                quick_sort(list,j+1,last);
                }
        }
void swap(student a,student b){
    student temp;
    temp=a;
    a=b;
    b=temp;
}
// SEARCH FUNCTION
void student::search( student list[])
{
        float SGPA;
        int i;
        cout<<"\n Enter SGPA:";
        cin>>SGPA;
        
        cout<<"\n Roll- Number \t Name \t SGPA \n";
        for(int i=0; i<size; i++)
        {
                if(SGPA==list[i].SGPA)
                cout<<"\n"<<list[i].roll_no<<"\t"<<list[i].name<<"\t"<<list[i].SGPA;
        }
}
// BINARY SEARCH FUNCTION
void student::binary_search( student list[])
{
        int k, lower,upper,mid;
        char search[80];
        cout<<"\n Enter Name Of Student You Want To Search: ";
        cin>>search;
        
        lower=0;
        upper=size-1;
        mid=(lower+upper)/2;
        
        while(lower<=upper)
        {
                if(strcmp(list[mid].name, search)<0)
                lower=mid+1;
                
                else if(strcmp(list[mid].name, search)==0)
                {
                        cout<<"\n"<<list[mid].roll_no<<"\t"<<list[mid].name<<"\t"<<list[mid].SGPA;
                        break;
                }
                else
                upper=mid-1;
                mid=(lower+upper)/2;
        }
        if(lower>upper)
        cout<<search<<"Not Found In The List";
        }
// MAIN FUNCTION
int main()
        {
        int ch,i;
        student data[20],s;
        s.accept(data);
        do
                {
                cout<<"\n";
                cout<<"\n 1) Bubble Sort";
                cout<<"\n 2) Insertion Sort";
                cout<<"\n 3) Quick Sort ";
                cout<<"\n 4) Search ";
                cout<<"\n 5) Binary Search ";
                cout<<"\n 6) Exit \n";
                cout<<"\n Select Your Choice: ";
                cin>>ch;
                switch(ch)
                        {
                        case 1:
                                s.bubble_sort(data);
                                s.display(data);
                                break;


                        case 2:
                                s.insert_sort(data);
                                s.display(data);
                                break;


                        case 3:
                                s.quick_sort(data,0,s.size-1);
                                s.display(data);
                                break;
                        
                        case 4:
                                s.search(data);
                                s.display(data);
                                break;
                                
                                    case 5:
                                s.binary_search(data);
                                s.display(data);
                                break;
                                
                        case 6:
                                cout<<"\nYou Have Successfully Exitted!!!.";
                                break;        
        


                        default:
                                cout<<"\nPlease Enter Valid Choice.\n";


                        }
                }
        while(ch!=6);
        return 0;
        }